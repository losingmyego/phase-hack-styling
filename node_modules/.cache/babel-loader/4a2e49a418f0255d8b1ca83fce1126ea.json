{"ast":null,"code":"const {\n  phase\n} = require('./utils/init.js');\n\nconst {\n  ethers\n} = require('ethers');\n\nconst base64 = require('base-64');\n\nconst {\n  displayPhase\n} = require('./displayPhase');\n\nconst user1 = \"0x9ecFca6B5dBE01772177F1b4fB660a063D17a7De\";\nconst user2 = \"0x6EE6D1DF5E2DccD784f7a4bf8eCE5Dbc1babBD45\"; /// @param follower is address initiating the follow\n/// @param following is the person to be followed\n\nasync function follow(follower, following) {\n  try {\n    // Get address of Phase Profile\n    let profileAddress = await phase.phase(following); // If Phase Profile is Zero Address (i.e. doesn't exist) return\n\n    if (profileAddress === ethers.constants.AddressZero) {\n      return \"That user doesn't have a profile\";\n    } // Build metadata\n\n\n    let metadata = await displayPhase(following); // Stringify metadata\n\n    metadata = JSON.stringify(metadata); // Create inline URI \n    // TEMP: Will integrate NFT.Storage\n\n    metadata = \"data:application/json;base64,\" + base64.encode(metadata);\n    let tx = await phase.follow(follower, following, metadata);\n    return tx;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexports.follow = follow;","map":{"version":3,"names":["phase","require","ethers","base64","displayPhase","user1","user2","follow","follower","following","profileAddress","constants","AddressZero","metadata","JSON","stringify","encode","tx","error","console","log","exports"],"sources":["/Users/losingmyego/Downloads/phase-metabolism-hack-functions/src/Phase/follow.js"],"sourcesContent":["const { phase } = require('./utils/init.js')\nconst { ethers } = require('ethers')\nconst base64 = require('base-64');\n\nconst { displayPhase } = require('./displayPhase')\n\nconst user1 = \"0x9ecFca6B5dBE01772177F1b4fB660a063D17a7De\"\nconst user2 = \"0x6EE6D1DF5E2DccD784f7a4bf8eCE5Dbc1babBD45\"\n\n/// @param follower is address initiating the follow\n/// @param following is the person to be followed\nasync function follow(follower, following) {\n    try {\n        // Get address of Phase Profile\n        let profileAddress = await phase.phase(following)\n\n        // If Phase Profile is Zero Address (i.e. doesn't exist) return\n        if (profileAddress === ethers.constants.AddressZero) {\n            return \"That user doesn't have a profile\"\n        }\n        \n        // Build metadata\n        let metadata = await displayPhase(following)\n\n        // Stringify metadata\n        metadata = JSON.stringify(metadata)\n\n        // Create inline URI \n        // TEMP: Will integrate NFT.Storage\n        metadata = \"data:application/json;base64,\" + base64.encode(metadata)\n\n        let tx = await phase.follow(follower, following, metadata)\n        \n        return tx \n        \n    } catch (error) {\n        console.log(error)\n    }\n    \n}\n\nexports.follow = follow"],"mappings":"AAAA,MAAM;EAAEA;AAAF,IAAYC,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAM;EAAEC;AAAF,IAAaD,OAAO,CAAC,QAAD,CAA1B;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,SAAD,CAAtB;;AAEA,MAAM;EAAEG;AAAF,IAAmBH,OAAO,CAAC,gBAAD,CAAhC;;AAEA,MAAMI,KAAK,GAAG,4CAAd;AACA,MAAMC,KAAK,GAAG,4CAAd,C,CAEA;AACA;;AACA,eAAeC,MAAf,CAAsBC,QAAtB,EAAgCC,SAAhC,EAA2C;EACvC,IAAI;IACA;IACA,IAAIC,cAAc,GAAG,MAAMV,KAAK,CAACA,KAAN,CAAYS,SAAZ,CAA3B,CAFA,CAIA;;IACA,IAAIC,cAAc,KAAKR,MAAM,CAACS,SAAP,CAAiBC,WAAxC,EAAqD;MACjD,OAAO,kCAAP;IACH,CAPD,CASA;;;IACA,IAAIC,QAAQ,GAAG,MAAMT,YAAY,CAACK,SAAD,CAAjC,CAVA,CAYA;;IACAI,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAeF,QAAf,CAAX,CAbA,CAeA;IACA;;IACAA,QAAQ,GAAG,kCAAkCV,MAAM,CAACa,MAAP,CAAcH,QAAd,CAA7C;IAEA,IAAII,EAAE,GAAG,MAAMjB,KAAK,CAACO,MAAN,CAAaC,QAAb,EAAuBC,SAAvB,EAAkCI,QAAlC,CAAf;IAEA,OAAOI,EAAP;EAEH,CAvBD,CAuBE,OAAOC,KAAP,EAAc;IACZC,OAAO,CAACC,GAAR,CAAYF,KAAZ;EACH;AAEJ;;AAEDG,OAAO,CAACd,MAAR,GAAiBA,MAAjB"},"metadata":{},"sourceType":"module"}