{"ast":null,"code":"const {\n  phase\n} = require('./utils/init.js');\n\nconst {\n  ethers\n} = require('ethers'); // Returns promise that resolves to metadata object\n\n\nasync function displayPhase(address) {\n  try {\n    let profile_address = await phase.phase(address); //  Require profile_address == zero address\n\n    if (profile_address == ethers.constants.AddressZero) {\n      return \"Phase Doesn't Exist!\";\n    } // Set array items to variables\n\n\n    let [username, avatar, bio, banner] = await phase.viewProfile(address);\n    let links = await phase.viewLinks(address); // Build metadata\n\n    let metadata = {\n      name: username,\n      image: avatar,\n      description: bio\n    }; // Set banner as top attribute\n\n    let attributes = [{\n      \"trait_type\": \"Banner\",\n      \"value\": banner\n    }]; // Set links as attributes\n\n    let title, url;\n    links.forEach(link => {\n      [title, url] = link;\n      attributes.push({\n        \"trait_type\": title,\n        \"value\": url\n      });\n    }); // Add attributes to metadata\n\n    metadata.attributes = attributes;\n    return metadata;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexports.displayPhase = displayPhase;","map":{"version":3,"names":["phase","require","ethers","displayPhase","address","profile_address","constants","AddressZero","username","avatar","bio","banner","viewProfile","links","viewLinks","metadata","name","image","description","attributes","title","url","forEach","link","push","error","console","log","exports"],"sources":["/Users/losingmyego/Downloads/phase-metabolism-hack-functions/src/Phase/displayPhase.js"],"sourcesContent":["const { phase } = require('./utils/init.js')\nconst { ethers } = require('ethers')\n\n// Returns promise that resolves to metadata object\nasync function displayPhase(address) {\n\n    try {\n\n        let profile_address = await phase.phase(address)\n\n        //  Require profile_address == zero address\n        if (profile_address == ethers.constants.AddressZero) {\n            return \"Phase Doesn't Exist!\"\n        }\n\n        // Set array items to variables\n        let [username, avatar, bio, banner] = await phase.viewProfile(address)\n\n        let links = await phase.viewLinks(address)\n\n        // Build metadata\n        let metadata = {\n            name : username,\n            image : avatar,\n            description : bio\n        }\n\n        // Set banner as top attribute\n        let attributes = [ { \"trait_type\": \"Banner\", \"value\": banner } ]\n\n        // Set links as attributes\n        let title, url\n        links.forEach(link => {\n            [title, url] = link\n            attributes.push({ \"trait_type\": title, \"value\": url })\n        })\n\n        // Add attributes to metadata\n        metadata.attributes = attributes\n        \n        return metadata\n\n    } catch (error) {\n        console.log(error)\n    }\n    \n}\n\nexports.displayPhase = displayPhase"],"mappings":"AAAA,MAAM;EAAEA;AAAF,IAAYC,OAAO,CAAC,iBAAD,CAAzB;;AACA,MAAM;EAAEC;AAAF,IAAaD,OAAO,CAAC,QAAD,CAA1B,C,CAEA;;;AACA,eAAeE,YAAf,CAA4BC,OAA5B,EAAqC;EAEjC,IAAI;IAEA,IAAIC,eAAe,GAAG,MAAML,KAAK,CAACA,KAAN,CAAYI,OAAZ,CAA5B,CAFA,CAIA;;IACA,IAAIC,eAAe,IAAIH,MAAM,CAACI,SAAP,CAAiBC,WAAxC,EAAqD;MACjD,OAAO,sBAAP;IACH,CAPD,CASA;;;IACA,IAAI,CAACC,QAAD,EAAWC,MAAX,EAAmBC,GAAnB,EAAwBC,MAAxB,IAAkC,MAAMX,KAAK,CAACY,WAAN,CAAkBR,OAAlB,CAA5C;IAEA,IAAIS,KAAK,GAAG,MAAMb,KAAK,CAACc,SAAN,CAAgBV,OAAhB,CAAlB,CAZA,CAcA;;IACA,IAAIW,QAAQ,GAAG;MACXC,IAAI,EAAGR,QADI;MAEXS,KAAK,EAAGR,MAFG;MAGXS,WAAW,EAAGR;IAHH,CAAf,CAfA,CAqBA;;IACA,IAAIS,UAAU,GAAG,CAAE;MAAE,cAAc,QAAhB;MAA0B,SAASR;IAAnC,CAAF,CAAjB,CAtBA,CAwBA;;IACA,IAAIS,KAAJ,EAAWC,GAAX;IACAR,KAAK,CAACS,OAAN,CAAcC,IAAI,IAAI;MAClB,CAACH,KAAD,EAAQC,GAAR,IAAeE,IAAf;MACAJ,UAAU,CAACK,IAAX,CAAgB;QAAE,cAAcJ,KAAhB;QAAuB,SAASC;MAAhC,CAAhB;IACH,CAHD,EA1BA,CA+BA;;IACAN,QAAQ,CAACI,UAAT,GAAsBA,UAAtB;IAEA,OAAOJ,QAAP;EAEH,CApCD,CAoCE,OAAOU,KAAP,EAAc;IACZC,OAAO,CAACC,GAAR,CAAYF,KAAZ;EACH;AAEJ;;AAEDG,OAAO,CAACzB,YAAR,GAAuBA,YAAvB"},"metadata":{},"sourceType":"module"}